# TARGET MARKET RESEARCH
# {Description}


# TARGET CUSTOMER RESEARCH
# {Description}


# target_audience =
# # (As a variable): dynamically holds any type of target_market_research_map, depending on what exactly the prompt needs
# # (As a parameter): takes a specific target_market_research_map["mini_map"] as the argument, based on what the prompt needs


target_market_research_map = {
    "mini_map": {
        "customer_desire_map": {
            "customer_desire_map_v1": "the output from running your customer_desire_map_module on the customer_testimonials",
            "customer_desire_map_v2": "the output from running your customer_desire_map_module on the client_discovery_call_transcript"
        },
        "storybrand_brandscript": "the output from running your storybrand_brandscript_module on both the customer_testimonials and client_discovery_call_transcript (where your module function accepts multiple arguments for one input parameter)"
    }  # Map: An individual target market research map generated by a specific target market research prompt: the filled-out template data (output) from running a specific module (function) on a specific document (input)
}  # Mini-Map: A comprehensive target market research map containing all related mini-maps inside it


customer_desire_map = {
    "voc_examples": {
        "customer_desire_map_v1": "customer voc data from this one specific mini-map (like direct quotes from testimonials that highlight fears_and_pains)",
        "customer_desire_map_v2": "customer voc data from this one specific mini-map (like direct quotes from testimonials that highlight fears_and_pains)"
    },
    "descriptions": {
        "customer_desire_map_v1": "more general, context-based descriptions of hopes_and_dreams, fears_and_pains, etc. from this one specific mini-map",
        "customer_desire_map_v2": "more general, context-based descriptions of hopes_and_dreams, fears_and_pains, etc. from this one specific mini-map"
    }
}  # (As a variable): holds the synthesized customer desire map (all the best data taken from each map, synthesized & consolidated into one variable). (As a parameter): takes the synthesized customer_desire_map as an argument (all customer_desire_map["mini_maps"])


voc = {
    "customer": {
        "customer_desire_map": customer_desire_map["voc_examples"],
        "the_7_types_of_customer_pain": "filled-out template of target customers' 7 pain types",
        # Add more customer  assets here (templates, maps, etc.)
    },
    "client": {
        "style_guide": "client's style guide data (content) goes here",
        # Add more emulation assets here (templates, maps, etc.)
    },
    "competitor": {
        "anti_testimonials": "customer  data from anti-testimonials (for competitor products or next-best-alternatives, like zero to mastery (ztm), udemy, free youtube videos, etc.) â€“ this specific key's insights are found outside your client's customer  data, like messages you'd find in reddit threads, udemy customer reviews of competitor products, etc."
        # Add more competitor  research data here
    },
    "creator": {
        "style_guide": {
            "dan_koe": "dan koe's style guide data (content) goes here",
            "justin_welsh": "justin welsh's style guide data (content) goes here",
            "tim_denning": "tim denning's style guide data (content) goes here",
            # Add more emulation assets here (templates, maps, etc.)
        }
    }
}


# # PRODUCT RESEARCH
# # {Description}

# # A comprehensive map of... includes creator's unique mechanism, competitive comparison, etc...
# product_map =

# product_description =  # A short & sweet version of the product_map

# product_content_outline =


# # COPY ELEMENTS
# # {Description}


# # STRUCTURE ELEMENTS
# # {Description}

# content_type =  # The type of content, like "single email" or "sales page"

# # (As a variable): a prompt that produces a designated content_type for a specific context, like a single email for an educational email course
# content_structure =
# # (As a parameter): takes a content_structure

# headline =

# intro =

# opener =

# main_point =

# subhead =

# conclusion =


# # Note: Use Sean Anthony's SSE Course to write prompts for each one of these components

# subject_line =

# hook =

# lead =

# body =

# transition =

# cta =

# signoff =

# ps =


def subject_line_writer_module():
    """
    A function that simulates generating a subject line
    """
    return "Dynamic Subject Line Based on Function Logic"


educational_email_course = {
    "title": "email course title",
    "outline": {
        "day_1": "title & description of email",
        "day_2": "title & description of email",
        "day_3": "title & description of email",
        "day_4": "title & description of email",
        "day_5": "title & description of email"
    },
    "emails": {
        # A dictionary containing all emails in the sequence
        "day_1": {
            # An individual email in the sequence
            "metadata": {
                # Properties or attributes of this specific email
                "goal": "purpose & goal of this specific email",
                # The goal & purpose of this specific email in relation to the entire sequence (What does this one focus on / accomplish)?
                "position_in_sequence": 1,
            },
            "content": {
                # Content of the email (broken down into structured components)
                # Calls the subject_line_writer_module function, a prompt by WWAI that writes a subject line for this specific email
                "subject_line": subject_line_writer_module(),
                "personal_greeting": "personal opener goes here",
                "lead": "lead goes here",
                "hook": "hook goes here",
                "body": "body copy goes here",
                "transition": "transition goes here",
                "cta": "cta goes here",
                "signoff": "signoff goes here",
                "ps": "ps goes here"
            }
        },
        "day_2": {
            # Add day_2 email here
        }
        # Add next emails here
    }
}


# # PSYCHOLOGY ELEMENTS
# # {Description}

# identity =

# current_state =

# future_state =

# gap =

# transformation =

# outcome =

# goal =

# problem =

# common_problem =

# problem_with_status_quo =

# pain_point =

# benefit =

# obstacle =

# roadblock =

# myth =

# mistake =

# misconception =

# faulty_belief =

# hopes_and_dreams =

# pains_and_fears =

# barriers_and_uncertainties =

# topic =

# big_idea =

# unique_perspective =

# unique_system =

# quote =

# tweet =

# concept =

# example =

# metaphor =

# comparison =

# story =

# popular_story =

# personal_experience =

# anecdote =

# lesson =

# reaction =  # Reaction copy is conversational stuff like asides, thoughts out loud, dialogue

# reader_callout =

# personal_relevance =

# level_of_awareness =

# information_gap =

# curiosity_gap =

# open_loop =

# action_steps =

# effort =  # (Prolly the same definition as effort_and_sacrifice)

# timeframe =

# offer =

# value =

# pricing =

# guarantee =

# risk_reversal =

# perceived_risk =

# next_best_alteratives =

# stakes =

# social_proof =

# testimonials =

# screenshots =

# case_studies =

# timing_effect =

# urgency =

# scarcity =

# value_equation =

# dream_outcome =

# perceived_likelihood_of_achievement =

# time_delay =

# effort_and_sacrifice =


# # STYLE GUIDES
# # {Description}

# style_guide =

# style_sheet =

# style_guide_template =

# syntactic_structure_template =  # Models...

# semantic_structure_template =  # Models meaning, context, voice, vibe...

# rhetorical_structure_template =

# rhythm_block_structure_template =

# # Content samples (in markdown format) you want to emulate
# examples_to_emulate =


# SOURCE DOCUMENTS
# These files are located in the Knowledge Base


knowledge_base = {
    "research_layer": {
        "customer_testimonials": "customer testimonials document",
        "client_discovery_call_transcript": "client discovery call transcript document",
        "course_content_transcripts": "course content transcript documents",
        "creator_story_call_transcript": "kyle's story call transcript document",
        # Still thinking about calling this something more general like `content_example_to_emulate` or storing it as a key called `content_sample`, like this: `voc["creator"]["style_guide"]["content_sample"]`
        "youtube_video_transcript": "youtube video transcript document"
        # Add more research layer documents
    },
    "resource_layer": {
        # Add resource layer docs here
    }
}


# # PROMPT MODULES
# # {Description}


# target_audience_map_module =

#   customer_desire_map_module =

# product_map_module =

#   product_content_outline_module =

# content_structures_module =

#     educational_email_course_module =

#       educational_email_course_outline_module =

#     single_email_module =

#   structure_elements_module = #

#   psychology_elements_module = #

#     bullet_points_module = #

#     storytelling_module = #

# content_styles_module = #

#   style_guides_module = #

#     emulation_extraction_module = # Or call this `creator_emulator_module`


# # CUSTOM INSTRUCTIONS
# # {Description}


# custom_instructions_module = # To create this, emulate WWAI's prompt structure & style
